import "tfplan/v2" as tfplan

# Get all db_instances instances from all modules
db_instances = filter tfplan.resource_changes as _, rc {
	rc.mode is "managed" and
		rc.type is "aws_db_instance" and
		(rc.change.actions contains "create" or
			rc.change.actions is ["update"])
}

allowed_instances = ["db.m6i.large", "db.m6i.xlarge", "db.m6i.2xlarge", "db.m6i.4xlarge", "db.m6i.8xlarge", "db.m6i.12xlarge", "db.m6i.16xlarge", "db.m6i.24xlarge", "db.m6i.32xlarge", "db.r6i.large", "db.r6i.xlarge", "db.r6i.2xlarge", "db.r6i.4xlarge", "db.r6i.8xlarge", "db.r6i.12xlarge", "db.r6i.16xlarge", "db.r6i.24xlarge", "db.r6i.32xlarge"]

# Rule to restrict instance_class types
instance_class_allowed = rule {
	all db_instances as _, instance {
		instance.change.after.instance_class in allowed_instances
	}
}

// --------------------------------------------------------
//                     _       _       _
//                    (_)     | |     | |
//                     _ _ __ | |_ ___| |
//                    | | '_ \| __/ _ \ |
//                    | | | | | ||  __/ |
//                    |_|_| |_|\__\___|_|
//
// --------------------------------------------------------
// Name:        deny-unapproved-instance-types.sentinel
// Category:    Infrastructure (IaaS)
// Provider:    hashicorp/aws
// Resource:    aws_db_instance
// Parameter:   instance_type
//
// Check:       instance_type does not contain:
//              db.m6i.large, db.m6i.xlarge
//              db.m6i.2xlarge, db.m6i.4xlarge
//              db.m6i.8xlarge, db.m6i.12xlarge
//              db.m6i.16xlarge, db.m6i.24xlarge
//              db.m6i.32xlarge, db.r6i.large
//              db.r6i.xlarge, db.r6i.2xlarge
//              db.r6i.4xlarge, db.r6i.8xlarge
//              db.r6i.12xlarge, db.r6i.16xlarge
//              db.r6i.24xlarge, db.r6i.32xlarge
// --------------------------------------------------------
//  The configured instance_class should an Intel Xeon 3rd Generation Scalable processors (code-named Ice Lake)
// --------------------------------------------------------
main = rule {
	(instance_class_allowed) else true
}
